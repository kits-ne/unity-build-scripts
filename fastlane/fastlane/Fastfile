# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# default_platform(:ios)

require 'os'
require 'fastlane_core/ui/ui'

UI = FastlaneCore::UI unless Fastlane.const_defined?("UI")

platform :android do

    # before_all do |lane|
    #     Dotenv.overload '../../.env'
    #     environment = lane_context[SharedValues::ENVIRONMENT]
    #     unless environment.nil?
    #         puts "Load .env file of #{environment}"
    #         Dotenv.overload '../../.env.' + environment
    #     end
    # end

    lane :deploy_app_center do |options|
        job = nil
        if options[:job] != nil
            job = options[:job]
        elsif ENV["job"] != nil
            job = ENV["job"]
        end
        apk_path = build(job: job)
        upload_app_center(path: apk_path)
    end

    private_lane :build do |options|
        # PROJECT_DIR = File.expand_path('../../', Dir.pwd)
        #         LOGFILE = "#{PROJECT_DIR}/Editor.log"
        #         ARGS = "#{LOGFILE}"
        ARGS = ""

        if options[:job] != nil
            ARGS = "#{ARGS} -job #{options[:job]}"
        end

        # puts PROJECT_DIR

        unity(
            # project_path: PROJECT_DIR,
            build_target: "Android",
            extra_args: ARGS
        )

        "#{ENV["FL_UNITY_PROJECT_PATH"]}/Build/android/#{ENV["PRODUCT_NAME"]}.apk"
    end

    lane :upload_app_center do |options|
        appcenter_upload(
            api_token: ENV["APPCENTER_ANDROID_API_TOKEN"],
            file: options[:path],
            notify_testers: true,
            app_os: "Android",
            upload_build_only: true,
            app_name: ENV["APPCENTER_ANDROID_APP_NAME"],
            release_notes: "upload #{Date.today.strftime("%Y%m%d")}"
        )
    end

    ################
    # lane :aab_to_appcenter do |options|
    #     # bundletool(
    #     #   ks_path: options[:keystore_path],
    #     #   ks_password: options[:keystore_password],
    #     #   ks_key_alias: options[:keystore_alias],
    #     #   ks_key_alias_password: options[:keystore_alias_password],
    #     #   bundletool_version: '1.10.0',
    #     #   aab_path: options[:aab_path],
    #     #   apk_output_path: options[:apk_output_path],
    #     #   verbose: true
    #     # )
    #     bundletool(
    #         ks_path: "D:/workspace/unity/AppBuilder/secrets/deploy.keystore",
    #         ks_password: "000000",
    #         ks_key_alias: "deploy",
    #         ks_key_alias_password: "000000",
    #         bundletool_version: '1.10.0',
    #         aab_path: "D:/workspace/unity/AppBuilder/Build/Android/AppBuilder.aab",
    #         apk_output_path: "D:/workspace/unity/AppBuilder/Build/Android/AppBuilder.apk",
    #         verbose: true
    #     )
    # end
    #
    # lane :appcenter do |options|
    #     unless options[:path]
    #         raise 'require path'
    #     end
    #     appcenter_upload(
    #         api_token: ENV["APPCENTER_ANDROID_API_TOKEN"],
    #         file: options[:path],
    #         notify_testers: true,
    #         app_os: "Android",
    #         upload_build_only: true,
    #         app_name: "AppBuilder-Android",
    #         release_notes: "upload #{Date.today.strftime("%Y%m%d")}"
    #     )
    # end
    #
    # lane :plugin do |options|
    #     # UNITY_PATH = 'C:\Program Files\Unity\Hub\Editor\2021.2.12f1\Editor\Unity.exe'
    #     # UNITY_VERSION = '2021.2.12f1'
    #
    #     UNITY_PATH = get_unity_path(options[:unity_version])
    #
    #     PROJECT_DIR = File.expand_path('../', Dir.pwd)
    #     METHOD = 'AppBuilderSample.BasicAndroid.Build'
    #     LOGFILE = "#{PROJECT_DIR}/Editor.log"
    #
    #     ARGS = "#{LOGFILE} -appsettings \"Assets/Samples/AppBuilder/0.0.1/Basic Android\" -keystore \"Assets/Samples/AppBuilder/0.0.1/Basic Android/user.keystore\" -keystorePasswd \"111111\" -keystoreAlias \"appbuilder\" -keystoreAliasPasswd \"111111\""
    #
    #     unity(
    #         unity_path: UNITY_PATH,
    #         # unity_version: UNITY_VERSION,
    #         project_path: PROJECT_DIR,
    #         build_target: "Android",
    #         execute_method: METHOD,
    #         extra_args: ARGS
    #     )
    # end
    # lane :upload_internal do
    #
    #     UNITY_VERSION = "2021.2.12f1";
    #     UNITY_PATH = get_unity_path(UNITY_VERSION)
    #
    #     PROJECT_DIR = File.expand_path('../', Dir.pwd)
    #     METHOD = 'Samples.Deploy.UseCase.Build.Android'
    #     LOGFILE = "#{PROJECT_DIR}/Editor.log"
    #     #
    #     ARGS = "#{LOGFILE} -appsettings \"Assets/Samples/Deploy/UseCase\""
    #
    #     unity(
    #         unity_path: UNITY_PATH,
    #         # unity_version: UNITY_VERSION,
    #         project_path: PROJECT_DIR,
    #         build_target: "Android",
    #         execute_method: METHOD,
    #         extra_args: ARGS
    #     )
    #
    #     upload_to_play_store(
    #         track: "internal",
    #         aab: File.expand_path("../Build/Android/AppBuilder.aab", Dir.pwd),
    #         release_status: "draft"
    #     )
    # end
end

platform :ios do

    lane :deploy_device do |options|
        xcode_path = build(job: options[:job])
        destination = "platform=iOS,id=#{ENV["DEPLOY_DEVICE_ID"]}"

        install_device(
            product_name: ENV["PRODUCT_NAME"],
            project: xcode_path,
            team_id: ENV["TEAM_ID"],
            destination: destination,
            device: ENV["DEPLOY_DEVICE_ID"],
        )
    end

    lane :install_device do |options|
        product_name = options[:product_name]
        project = options[:project]
        team_id = options[:team_id]
        destination = options[:destination]
        device = options[:device]

        update_code_signing_settings(
            path: project,
            targets: "Unity-iPhone",
            use_automatic_signing: true,
            team_id: team_id
        )

        begin

            scan(
                project: project,
                scheme: 'Unity-iPhone',
                destination: destination,
                build_for_testing: true
            )
            
            derived_path = lane_context[SharedValues::SCAN_DERIVED_DATA_PATH]

            sh "(ios-deploy -i #{device} -b #{derived_path}/Build/Products/Debug-iphoneos/#{product_name}.app || true)"
        rescue => ex
            UI.error(ex)
        end    
    end

    error do |lane, exception|

    end

    lane :deploy_app_center do |options|
        xcode_path = build(job: options[:job])
        match(type: "development", readonly: true)
        profiles = lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
        update_signing(profiles: profiles, path: xcode_path, code_sign_identity: "Apple Development")

        export_ipa(project_path: xcode_path, output_dir: "Build/iOS", export_method: "development")
        ipa = lane_context[:IPA_OUTPUT_PATH]
        dsym = lane_context[:DSYM_OUTPUT_PATH]

        puts ipa
        puts dsym

        upload_app_center(path: ipa)
    end

    private_lane :build do |options|
        ARGS = ""

        if options[:job] != nil
            ARGS = "#{ARGS} -job #{options[:job]}"
        end

        unity(
            build_target: "iOS",
            extra_args: ARGS
        )

        "#{ENV["FL_UNITY_PROJECT_PATH"]}/Build/ios/#{ENV["PRODUCT_NAME"]}/Unity-iPhone.xcodeproj"
    end

    private_lane :export_ipa do |options|
        project_path = options[:project_path]
        export_method = options[:export_method]

        output_dir = "#{options[:output_dir]}/#{export_method}"

        archive_path = "#{output_dir}/Archive"

        gym(
            scheme: "Unity-iPhone",
            project: project_path,
            configuration: "Release",
            clean: true,
            output_directory: output_dir,
            export_method: export_method,
            include_bitcode: false,
            export_options: {
                compileBitcode: false
            },
            archive_path: archive_path
        )
        archive_path = File.expand_path("../#{archive_path}.xcarchive", Dir.pwd)
        if File.exist?(archive_path)
            sh(command: "rm -vfr #{archive_path}")
        end

        # product_name = ENV["PRODUCT_NAME"]
        # ipa_path = File.expand_path("/#{output_dir}/#{product_name}.ipa", Dir.pwd)
        # dsym_path = File.expand_path("/#{output_dir}/#{product_name}.app.dSYM.zip", Dir.pwd)
        #
        # return ipa_path, dsym_path
    end

    private_lane :update_signing do |options|
        profiles = options[:profiles]
        path = options[:path]
        code_sign_identity = options[:code_sign_identity]

        update_code_signing_settings(
            path: path,
            targets: "Unity-iPhone",
            use_automatic_signing: false,
            team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
            profile_name: profiles[CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)],
            code_sign_identity: code_sign_identity
        )
    end

    private_lane :upload_app_center do |options|

        build_only = options[:dsym].nil? ? true : false
        dsym_path = options[:dsym]
        notify_testers = options[:notify].nil? ? false : options[:notify]

        appcenter_upload(
            api_token: ENV["APPCENTER_IOS_API_TOKEN"],
            file: options[:path],
            notify_testers: notify_testers,
            app_os: "iOS",
            upload_build_only: build_only,
            dsym: dsym_path,
            app_name: ENV["APPCENTER_IOS_APP_NAME"],
            release_notes: "upload #{Date.today.strftime("%Y%m%d")}"
        )
    end

    # def update_signing(path, code_sign_identity)
    #     profiles = lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
    #     update_code_signing_settings(
    #         path: path,
    #         targets: "Unity-iPhone",
    #         use_automatic_signing: false,
    #         team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
    #         profile_name: profiles[CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)],
    #         code_sign_identity: code_sign_identity
    #     )
    # end

    # def export_ipa(project, output_directory, export_method)
    #     archive_path = "#{output_directory}/Archive"
    #     gym(
    #         scheme: "Unity-iPhone",
    #         project: project,
    #         configuration: "Release",
    #         clean: true,
    #         output_directory: "#{output_directory}/#{export_method}",
    #         export_method: export_method,
    #         include_bitcode: false,
    #         export_options: {
    #             compileBitcode: false
    #         },
    #         archive_path: archive_path
    #     )
    #     archive_path = File.expand_path("../#{archive_path}.xcarchive", Dir.pwd);
    #     if File.exist?(archive_path)
    #         sh(command: "rm -vfr #{archive_path}")
    #     end
    #
    # end

    # XCODE_PROJECT = File.expand_path("#{ENV["XCODE_PROJECT_PATH"]}/Unity-iPhone.xcodeproj", Dir.pwd)
    #
    # def build_unity(target, method, args)
    #     unity(
    #         unity_version: ENV["UNITY_VERSION"],
    #         project_path: File.expand_path("../", Dir.pwd),
    #         build_target: target,
    #         execute_method: method,
    #         extra_args: args
    #     )
    # end
    #

    #

    #
    # def install_devices
    #     devices = ENV["INSTALL_DEVICES_ID"]
    #                   .split("\n")
    #                   .select { |device_id| not device_id.empty? }
    #
    #     devices.each do |device_id|
    #         install_on_device(
    #             device_id: device_id,
    #             ipa: lane_context["IPA_OUTPUT_PATH"],
    #         )
    #     end
    # end
    #
    # private_lane :upload_ipa do |options|
    #
    #     notify_testers = options[:notify].nil? ? false : options[:notify]
    #
    #     appcenter_upload(
    #         file: lane_context["IPA_OUTPUT_PATH"],
    #         notify_testers: notify_testers,
    #         app_os: options[:app_os],
    #         upload_build_only: true,
    #         release_notes: "upload #{Date.today.strftime("%Y%m%d")}"
    #     )
    # end
    #

    #
    # lane :unity_development_install_devices do
    #     unity_development
    #     install_devices
    # end
    #
    # lane :unity_development_appcenter do
    #     unity_development
    #     upload_ipa(app_os: 'iOS')
    # end
    #
    # lane :adhoc do
    #     match(
    #         type: "adhoc",
    #         readonly: false,
    #         force_for_new_devices: true
    #     )
    #     profiles = lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
    #     update_code_signing_settings(
    #         path: XCODE_PROJECT,
    #         targets: "Unity-iPhone",
    #         use_automatic_signing: false,
    #         team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
    #         profile_name: profiles[CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)],
    #         code_sign_identity: "Apple Distribution",
    #     # build_configurations: ["Debug", "Release", "ReleaseForProfiling", "ReleaseForRunning"]
    #     )
    #     gym(
    #         scheme: "Unity-iPhone",
    #         project: XCODE_PROJECT,
    #         configuration: "Release",
    #         clean: true,
    #         output_directory: "Build/AdHoc",
    #         export_method: "ad-hoc",
    #         include_bitcode: false,
    #         export_options: {
    #             compileBitcode: false
    #         },
    #         archive_path: "Build/iOS/Archive"
    #     )
    #     # install_on_device(
    #     #     device_id: "00008101-0005485C3E31003A",
    #     #     ipa: lane_context["IPA_OUTPUT_PATH"] #lane_context["IPA_OUTPUT_PATH"]
    #     # )
    # end
    #
    # lane :adhoc_app_center do
    #     match(
    #         type: "adhoc",
    #         readonly: false,
    #         force_for_new_devices: true
    #     )
    #     profiles = lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
    #     update_code_signing_settings(
    #         path: XCODE_PROJECT,
    #         targets: "Unity-iPhone",
    #         use_automatic_signing: false,
    #         team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
    #         profile_name: profiles[CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)],
    #         code_sign_identity: "Apple Distribution",
    #     )
    #     gym(
    #         scheme: "Unity-iPhone",
    #         project: XCODE_PROJECT,
    #         configuration: "Release",
    #         clean: true,
    #         output_directory: "Build/AdHoc",
    #         export_method: "ad-hoc",
    #         include_bitcode: false,
    #         export_options: {
    #             compileBitcode: false
    #         },
    #         archive_path: "Build/iOS/Archive"
    #     )
    #     archive_path = File.expand_path("../Build/iOS/Archive.xcarchive", Dir.pwd);
    #     if File.exist?(archive_path)
    #         File.chmod(666, archive_path)
    #         File.delete(archive_path)
    #     end
    #
    #     appcenter_upload(
    #         # api_token: ENV["APP_CENTER_API_TOKEN"], # APPCENTER_API_TOKEN
    #         # owner_name: "qkrsogusl3", # APPCENTER_OWNER_NAME
    #         # owner_type:"user",
    #         # app_name: "AppBuilder", # APPCENTER_APP_NAME
    #         file: lane_context["IPA_OUTPUT_PATH"],
    #         notify_testers: true,
    #         app_os: "iOS",
    #         upload_build_only: true,
    #         release_notes: "upload #{Date.today.strftime("%Y%m%d")}"
    #     )
    # end
    #
    # lane :delete do
    #     archive_path = File.expand_path("../Build/iOS/Archive.xcarchive", Dir.pwd);
    #     # if File.exist?(archive_path)
    #     #     File.delete(archive_path)
    #     # end
    #     sh(command: "rm -vfr #{archive_path}")
    # end
    #
    # lane :unity_appstore_testflight do
    #     method = "Samples.DeployUseCase.Build.Deploy"
    #     args = "-appsettings \"Assets/DeployUseCase\" -variant \"iOS\""
    #     unity(
    #         unity_version: ENV["UNITY_VERSION"],
    #         project_path: File.expand_path("../", Dir.pwd),
    #         build_target: "iOS",
    #         execute_method: method,
    #         extra_args: args
    #     )
    #
    #     match(
    #         type: "appstore",
    #         readonly: true
    #     )
    #     profiles = lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
    #     update_code_signing_settings(
    #         path: XCODE_PROJECT,
    #         targets: "Unity-iPhone",
    #         use_automatic_signing: false,
    #         team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
    #         profile_name: profiles[CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)],
    #         code_sign_identity: "Apple Distribution",
    #     )
    #     # App Uses Non-Exempt Encryption : No
    #     gym(
    #         scheme: "Unity-iPhone",
    #         project: XCODE_PROJECT,
    #         configuration: "Release",
    #         clean: true,
    #         output_directory: "Build/AppStore",
    #         export_method: "app-store",
    #         include_bitcode: false,
    #         export_options: {
    #             compileBitcode: false
    #         },
    #     )
    # end
    #
    # lane :upload_pilot do
    #     pilot(
    #         api_key_path: File.expand_path(ENV["APPSTORECONNECT_API_JSON"], Dir.pwd),
    #         # username: CredentialsManager::AppfileConfig.try_fetch_value(:apple_id),
    #         ipa: File.expand_path("../Build/AppStore/AppBuilder.ipa"),
    #     )
    # end
    #
    # lane :build do |options|
    #     unity = get_unity_path(options[:unity_version])
    #     project = "/Users/aaron/workspace/unity/AppBuilder"
    #     method = "AppBuilderSample.BasiciOS.Build"
    #     args = ""
    #     unity(
    #         unity_path: unity,
    #         project_path: project,
    #         build_target: "iOS",
    #         execute_method: method,
    #         extra_args: args
    #     )
    # end
    #
    # lane :test do
    #     project = File.expand_path("../Build/iOS/AppBuilder/Unity-iPhone.xcodeproj", Dir.pwd)
    #     scan(
    #         project: project,
    #         scheme: "Unity-iPhone",
    #         device: "iPhone 12",
    #     # build_for_testing: true
    #     )
    # end
    #
    # lane :build_ipa do
    #     project = File.expand_path("../Build/iOS/AppBuilder/Unity-iPhone.xcodeproj", Dir.pwd)
    #
    #     identifier = "com.DefaultCompany.AppBuilder"
    #     automatic_code_signing(
    #         path: project,
    #         use_automatic_signing: true,
    #         team_id: "D755A5HZ37",
    #         bundle_identifier: identifier,
    #         profile_uuid: "YR9GNYKWY2"
    #     # code_sign_identity: "Apple Development",
    #     # profile_name: "iOS Team Provisioning Profile: #{identifier}"
    #     )
    #
    #     build_ios_app(
    #         project: project,
    #         scheme: "Unity-iPhone",
    #         output_directory: File.expand_path("../Build/iOS", Dir.pwd),
    #         # output_name: "App"
    #         # codesigning_identity:"Apple Development: SEONGHO PARK",
    #         skip_codesigning: true
    #     )
    # end
end

def get_unity_path (version)
    unless version
        UI.user_error!("require unity_version")
    end

    path = ''
    if OS::Underlying.docker? and OS::Underlying.linux?
        # See: https://gitlab.com/gableroux/unity3d
        # sh "echo '/opt/Unity/Editor/Unity'"
        path << "/opt/unity/editors/#{version}/Editor/Unity"
    elsif OS.mac?
        path << "/Applications/Unity/Hub/Editor/#{version}/Unity.app/Contents/MacOS/Unity"
    elsif OS.windows?
        path << "C:\\Program Files\\Unity\\Hub\\Editor\\#{version}\\Editor\\Unity.exe"
    end

    unless File.exist?(path)
        UI.user_error!("not found editor path: #{path}")
    end

    return path
end
